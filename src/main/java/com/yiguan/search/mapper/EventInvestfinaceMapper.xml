<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yiguan.search.mapper.EventInvestfinaceMapper" >
  <resultMap id="BaseResultMap" type="com.yiguan.search.model.EventInvestfinace" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="financiers" property="financiers" jdbcType="VARCHAR" />
    <result column="time" property="time" jdbcType="VARCHAR" />
    <result column="industry" property="industry" jdbcType="VARCHAR" />
    <result column="class_lb" property="classLb" jdbcType="VARCHAR" />
    <result column="domain" property="domain" jdbcType="VARCHAR" />
    <result column="round" property="round" jdbcType="VARCHAR" />
    <result column="quota" property="quota" jdbcType="VARCHAR" />
    <result column="investors" property="investors" jdbcType="VARCHAR" />
    <result column="euuid" property="euuid" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Example_Where_Clause_forPage" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Group_Contact_List" >
    <choose >
      <when test="groupConcatList!=null and groupByClause != null" >
        <trim prefix="" suffix="" suffixOverrides="," >
          <foreach collection="groupConcatList" item="concat" separator="," >
            ${concat}
          </foreach>
        </trim>
        ,
      </when>
    </choose>
  </sql>
  <sql id="Group_Contact_List_forPage" >
    <choose >
      <when test="example.groupConcatList!=null and example.groupByClause != null" >
        <trim prefix="" suffix="" suffixOverrides="," >
          <foreach collection="example.groupConcatList" item="concat" separator="," >
            ${concat}
          </foreach>
        </trim>
        ,
      </when>
    </choose>
  </sql>
  <sql id="Base_Column_List" >
    <choose >
      <when test="columnFilterList!=null" >
        <trim prefix="" suffix="" suffixOverrides="," >
          <foreach collection="columnFilterList" item="column" separator="," >
            ${column}
          </foreach>
        </trim>
      </when>
      <otherwise >
        id, financiers, time, industry, class_lb, domain, round, quota, investors, euuid
      </otherwise>
    </choose>
  </sql>
  <sql id="Base_Column_List_forPage" >
    <choose >
      <when test="example.columnFilterList!=null" >
        <trim prefix="" suffix="" suffixOverrides="," >
          <foreach collection="example.columnFilterList" item="column" separator="," >
            ${column}
          </foreach>
        </trim>
      </when>
      <otherwise >
        id, financiers, time, industry, class_lb, domain, round, quota, investors, euuid
      </otherwise>
    </choose>
  </sql>
  <sql id="Base_Column_List_all" >
    id, financiers, time, industry, class_lb, domain, round, quota, investors, euuid
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.yiguan.search.model.EventInvestfinaceExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Group_Contact_List" />
    <include refid="Base_Column_List" />
    from event_investfinace
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="groupByClause != null" >
      group by ${groupByClause}
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleForPage" resultMap="BaseResultMap" parameterType="map" >
    select
    <if test="example.distinct" >
      distinct
    </if>
    <include refid="Group_Contact_List_forPage" />
    <include refid="Base_Column_List_forPage" />
    from event_investfinace
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause_forPage" />
    </if>
    <if test="example.groupByClause != null" >
      group by ${example.groupByClause}
    </if>
    <if test="example.orderByClause != null" >
      order by ${example.orderByClause}
    </if>
    <if test="page.limit != -1" >
       limit #{page.begin}, #{page.limit}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List_all" />
    from event_investfinace
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from event_investfinace
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.yiguan.search.model.EventInvestfinaceExample" >
    delete from event_investfinace
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.yiguan.search.model.EventInvestfinace" useGeneratedKeys="true" keyProperty="id" >
    insert into event_investfinace (id, financiers, time, 
      industry, class_lb, domain, 
      round, quota, investors, 
      euuid)
    values (#{id,jdbcType=INTEGER}, #{financiers,jdbcType=VARCHAR}, #{time,jdbcType=VARCHAR}, 
      #{industry,jdbcType=VARCHAR}, #{classLb,jdbcType=VARCHAR}, #{domain,jdbcType=VARCHAR}, 
      #{round,jdbcType=VARCHAR}, #{quota,jdbcType=VARCHAR}, #{investors,jdbcType=VARCHAR}, 
      #{euuid,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yiguan.search.model.EventInvestfinace" useGeneratedKeys="true" keyProperty="id" >
    insert into event_investfinace
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="financiers != null" >
        financiers,
      </if>
      <if test="time != null" >
        time,
      </if>
      <if test="industry != null" >
        industry,
      </if>
      <if test="classLb != null" >
        class_lb,
      </if>
      <if test="domain != null" >
        domain,
      </if>
      <if test="round != null" >
        round,
      </if>
      <if test="quota != null" >
        quota,
      </if>
      <if test="investors != null" >
        investors,
      </if>
      <if test="euuid != null" >
        euuid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="financiers != null" >
        #{financiers,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        #{time,jdbcType=VARCHAR},
      </if>
      <if test="industry != null" >
        #{industry,jdbcType=VARCHAR},
      </if>
      <if test="classLb != null" >
        #{classLb,jdbcType=VARCHAR},
      </if>
      <if test="domain != null" >
        #{domain,jdbcType=VARCHAR},
      </if>
      <if test="round != null" >
        #{round,jdbcType=VARCHAR},
      </if>
      <if test="quota != null" >
        #{quota,jdbcType=VARCHAR},
      </if>
      <if test="investors != null" >
        #{investors,jdbcType=VARCHAR},
      </if>
      <if test="euuid != null" >
        #{euuid,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.yiguan.search.model.EventInvestfinaceExample" resultType="java.lang.Integer" >
    <choose >
      <when test="groupByClause != null" >
        select count(*) from ( select count(*) from event_investfinace
        <if test="_parameter != null" >
          <include refid="Example_Where_Clause" />
        </if>
        group by ${groupByClause}) as temp
      </when>
      <otherwise >
        select count(*) from event_investfinace
        <if test="_parameter != null" >
          <include refid="Example_Where_Clause" />
        </if>
      </otherwise>
    </choose>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update event_investfinace
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.financiers != null" >
        financiers = #{record.financiers,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null" >
        time = #{record.time,jdbcType=VARCHAR},
      </if>
      <if test="record.industry != null" >
        industry = #{record.industry,jdbcType=VARCHAR},
      </if>
      <if test="record.classLb != null" >
        class_lb = #{record.classLb,jdbcType=VARCHAR},
      </if>
      <if test="record.domain != null" >
        domain = #{record.domain,jdbcType=VARCHAR},
      </if>
      <if test="record.round != null" >
        round = #{record.round,jdbcType=VARCHAR},
      </if>
      <if test="record.quota != null" >
        quota = #{record.quota,jdbcType=VARCHAR},
      </if>
      <if test="record.investors != null" >
        investors = #{record.investors,jdbcType=VARCHAR},
      </if>
      <if test="record.euuid != null" >
        euuid = #{record.euuid,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update event_investfinace
    set id = #{record.id,jdbcType=INTEGER},
      financiers = #{record.financiers,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=VARCHAR},
      industry = #{record.industry,jdbcType=VARCHAR},
      class_lb = #{record.classLb,jdbcType=VARCHAR},
      domain = #{record.domain,jdbcType=VARCHAR},
      round = #{record.round,jdbcType=VARCHAR},
      quota = #{record.quota,jdbcType=VARCHAR},
      investors = #{record.investors,jdbcType=VARCHAR},
      euuid = #{record.euuid,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.yiguan.search.model.EventInvestfinace" >
    update event_investfinace
    <set >
      <if test="financiers != null" >
        financiers = #{financiers,jdbcType=VARCHAR},
      </if>
      <if test="time != null" >
        time = #{time,jdbcType=VARCHAR},
      </if>
      <if test="industry != null" >
        industry = #{industry,jdbcType=VARCHAR},
      </if>
      <if test="classLb != null" >
        class_lb = #{classLb,jdbcType=VARCHAR},
      </if>
      <if test="domain != null" >
        domain = #{domain,jdbcType=VARCHAR},
      </if>
      <if test="round != null" >
        round = #{round,jdbcType=VARCHAR},
      </if>
      <if test="quota != null" >
        quota = #{quota,jdbcType=VARCHAR},
      </if>
      <if test="investors != null" >
        investors = #{investors,jdbcType=VARCHAR},
      </if>
      <if test="euuid != null" >
        euuid = #{euuid,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yiguan.search.model.EventInvestfinace" >
    update event_investfinace
    set financiers = #{financiers,jdbcType=VARCHAR},
      time = #{time,jdbcType=VARCHAR},
      industry = #{industry,jdbcType=VARCHAR},
      class_lb = #{classLb,jdbcType=VARCHAR},
      domain = #{domain,jdbcType=VARCHAR},
      round = #{round,jdbcType=VARCHAR},
      quota = #{quota,jdbcType=VARCHAR},
      investors = #{investors,jdbcType=VARCHAR},
      euuid = #{euuid,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>